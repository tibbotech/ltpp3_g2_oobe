/*Copyright 2021 Tibbo Technology Inc.*/

#ifndef SSI_NTIOS_SSITYPES_H_
#define SSI_NTIOS_SSITYPES_H_

#include <string>

typedef enum {
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 50kHz.
   */
  PL_SSI_BAUD_50kHz = 234,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 60kHz.
   */
  PL_SSI_BAUD_60kHz = 194,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 70kHz.
   */
  PL_SSI_BAUD_70kHz = 165,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 80kHz.
   */
  PL_SSI_BAUD_80kHz = 144,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 90kHz.
   */
  PL_SSI_BAUD_90kHz = 127,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 100kHz.
   */
  PL_SSI_BAUD_100kHz = 114,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 200kHz.
   */
  PL_SSI_BAUD_200kHz = 54,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 300kHz.
   */
  PL_SSI_BAUD_300kHz = 34,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 400kHz.
   */
  PL_SSI_BAUD_400kHz = 24,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 800kHz.
   */
  PL_SSI_BAUD_800kHz = 9,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 900kHz.
   */
  PL_SSI_BAUD_900kHz = 7,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the closest
   * value below 1MHz.
   */
  PL_SSI_BAUD_1MHz = 6,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the fastest
   * value.
   */
  PL_SSI_BAUD_FASTEST = 1,
  /**
   * @brief PLATFORM CONSTANT. Use this value to set the Baud to the slowest
   * value.
   */
  PL_SSI_BAUD_SLOWEST = 65535
} pl_ssi_baud;

typedef enum {
  /**
   * @brief SPI Mode 0, CPOL = 0, CPHA = 0: CLK idle state = low, data sampled
   * on rising edge and shifted on falling edge.
   */
  PL_SSI_MODE_0 = 0,
  /**
   * @brief SPI Mode 1, CPOL = 0, CPHA = 1: CLK idle state = low, data sampled
   * on the falling edge and shifted on the rising edge.
   */
  PL_SSI_MODE_1 = 1,
  /**
   * @brief SPI Mode 2, CPOL = 1, CPHA = 0: CLK idle state = high, data sampled
   * on the rising edge and shifted on the falling edge.
   */
  PL_SSI_MODE_2 = 2,
  /**
   * @brief SPI Mode 3, CPOL = 1, CPHA = 1: CLK idle state = high, data sampled
   * on the falling edge and shifted on the rising edge.
   */
  PL_SSI_MODE_3 = 3
} pl_ssi_mode;

typedef enum {
  /**
   * @brief PLATFORM CONSTANT. Data input/output LSB first.
   */
  PL_SSI_DIRECTION_RIGHT = 0,
  /**
   * @brief PLATFORM CONSTANT. Data input/output MSB first.
   */
  PL_SSI_DIRECTION_LEFT = 1
} pl_ssi_direction_options;

typedef enum {
  /**
   * @brief PLATFORM CONSTANT. The DO-line toggles normally (by setting the
   * output buffer to LOW or HIGH). This constant is used for SPI.
   */
  PL_SSI_ZMODE_ALWAYS_ENABLED = 0,
  /**
   * @brief PLATFORM CONSTANT. For HIGH state, the output buffer of the DO-line
   * is turned OFF and for LOW state, the output buffer is turned turned ON and
   * the line is set to LOW.
   */
  PL_SSI_ZMODE_ENABLED_ON_ZERO = 1
} pl_ssi_zmodes;

typedef enum {
  /**
   * @brief PLATFORM CONSTANT. 8 bits per data Byte. Acknowledgement bits are
   * not transmitted (or expected to be received).
   */
  PL_SSI_ACK_OFF = 0,
  /**
   * @brief PLATFORM CONSTANT. 9 bits per data Byte. Acknowledgement bits are
   * expected to be generated by the slave and their presence will be verified.
   * The slave device should pull the DI-line LOW on the 9th-bit of the Byte
   * transmission. Data exchange will be aborted if the slave device fails to
   * acknowledge any of the bytes. This does not apply to the last Byte because
   * the method execution will end after the tansmission of this Byte anyway.
   */
  PL_SSI_ACK_RX = 1,
  /**
   * @brief PLATFORM CONSTANT. 9 bits per data Byte.Acknowledgement bits are
   * generated by this device and each Byte will be acknowledged by pulling down
   * the DI-line low on the 9th-bit of the byte transmission.
   */
  PL_SSI_ACK_TX_ALL = 2,
  /**
   * @brief PLATFORM CONSTANT. 9 bits per data Byte.Acknowledgement bits are
   * generated by this device and each Byte EXCEPT for the last Byte will be
   * acknowledged by pulling down the DI-line low on the 9th-bit of the
   * transmission.
   */
  PL_SSI_ACK_ALL_BUT_LAST = 3
} pl_ssi_ack_modes;

#endif  // SSI_NTIOS_SSITYPES_H_